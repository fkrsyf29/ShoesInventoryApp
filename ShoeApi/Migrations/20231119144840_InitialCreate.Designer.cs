// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoeApi.Data;

#nullable disable

namespace ShoeApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231119144840_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("ShoeApi.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShoeApi.Entities.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ShoeDetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShoeDetailsId");

                    b.ToTable("Shoes");
                });

            modelBuilder.Entity("ShoeApi.Entities.ShoeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Harga")
                        .HasColumnType("TEXT");

                    b.Property<string>("Merk")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ukuran")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Warna")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoeDetails");
                });

            modelBuilder.Entity("ShoeApi.Entities.ShoeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Review")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShoeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ShoeId");

                    b.ToTable("ShoeReviews");
                });

            modelBuilder.Entity("ShoeApi.Entities.TransShoeCategory", b =>
                {
                    b.Property<int>("ShoeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("ShoeId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TransShoeCategories");
                });

            modelBuilder.Entity("ShoeApi.Entities.Shoe", b =>
                {
                    b.HasOne("ShoeApi.Entities.ShoeDetail", "ShoeDetails")
                        .WithMany()
                        .HasForeignKey("ShoeDetailsId");

                    b.Navigation("ShoeDetails");
                });

            modelBuilder.Entity("ShoeApi.Entities.ShoeReview", b =>
                {
                    b.HasOne("ShoeApi.Entities.Shoe", "Shoe")
                        .WithMany("Reviews")
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoe");
                });

            modelBuilder.Entity("ShoeApi.Entities.TransShoeCategory", b =>
                {
                    b.HasOne("ShoeApi.Entities.Category", "Category")
                        .WithMany("TransShoeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeApi.Entities.Shoe", "Shoe")
                        .WithMany("TransShoeCategories")
                        .HasForeignKey("ShoeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Shoe");
                });

            modelBuilder.Entity("ShoeApi.Entities.Category", b =>
                {
                    b.Navigation("TransShoeCategories");
                });

            modelBuilder.Entity("ShoeApi.Entities.Shoe", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("TransShoeCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
